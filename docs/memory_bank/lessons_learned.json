[
  {
    "_key": "cli_lesson_20250427_1103",
    "timestamp": "2025-04-27T11:03:00-04:00",
    "severity": "High",
    "role": "Senior Coder",
    "task_context": "CLI Command Execution - Entry Point Configuration",
    "problem": "Typer/Click CLI with subcommands failed with 'Got unexpected extra argument' when entry point pointed to wrapper function instead of app object directly. Common pattern of using wrapper function (e.g., main() that calls app()) breaks subcommand dispatch.",
    "solution": "Always point entry points in pyproject.toml directly to the Typer app object (e.g., my_cli = 'module.cli:app'), never to a wrapper function. Keep app() calls only in __main__ block. Documented in CLI_USAGE.md and TROUBLESHOOTING.md.",
    "tags": [
      "CLI",
      "Typer",
      "Click",
      "EntryPoint",
      "Setup",
      "Configuration",
      "BestPractices"
    ]
  },
  {
    "_key": "planner_lesson_20250427_1017",
    "timestamp": "2025-04-27T10:17:32-04:00",
    "severity": "Medium",
    "role": "Planner",
    "task_context": "Task 1.1/1.2 Completion - Lessons Learned Check",
    "problem": "Initial instructions specified an incorrect path for lessons_learned.json ('src/mcp_doc_retriever/docs/lessons_learned.json'), causing jq search failures.",
    "solution": "Located the correct path ('docs/memory_bank/lessons_learned.json') after it was created by a git operation. Planner instructions referencing specific file paths must be verified against the actual project structure to avoid workflow errors.",
    "tags": [
      "Planner",
      "Configuration",
      "Workflow",
      "ErrorHandling",
      "Instructions"
    ]
  },
  {
    "_key": "cli_pattern_20250427_1117",
    "timestamp": "2025-04-27T11:17:00-04:00",
    "severity": "High",
    "role": "Senior Coder",
    "task_context": "Typer CLI Implementation Patterns",
    "problem": "Developers frequently choose incorrect Typer CLI patterns (wrapper functions/subcommands) due to legacy Python CLI conventions and Click inheritance, leading to argument parsing issues and broken entry points.",
    "solution": "ALWAYS use direct app configuration with Typer:\n1. Create app = typer.Typer() at module level\n2. Use @app.command() without names for single-command CLIs\n3. Point entry_points directly to the app object (e.g., cli:app)\n4. Never use wrapper functions that call app()\n5. Keep app() calls only in __main__ block",
    "tags": [
      "CLI",
      "Typer",
      "BestPractices",
      "EntryPoint",
      "Python",
      "CommonMistakes",
      "Architecture"
    ]
  },
  {
    "_key": "planner_jq_search_20250427_1316",
    "timestamp": "2025-04-27T13:16:19-04:00",
    "severity": "Low",
    "role": "Planner",
    "task_context": "Task 1.4 Completion - Lessons Learned Check",
    "problem": "jq search for lessons learned failed due to multiple issues: incorrect file path assumption, incorrect query structure (expecting `.lessons[]` for a top-level array), and case-sensitive `contains` matching for tags.",
    "solution": "Verified the correct file path (`docs/memory_bank/lessons_learned.json`). Adjusted `jq` query to operate on the top-level array (`.[]`) and used `ascii_downcase` before `contains` for case-insensitive tag matching. Command: `jq '.[] | select(.tags[] | ascii_downcase | (contains(\"cli\") or contains(\"typer\") or contains(\"prompt\") or contains(\"option\")) )' docs/memory_bank/lessons_learned.json`",
    "tags": [
      "Planner",
      "jq",
      "JSON",
      "Workflow",
      "ErrorHandling",
      "Debugging",
      "Command"
    ]
  }
]