Metadata-Version: 2.4
Name: perplexity-cli
Version: 0.1.0
Summary: Perplexity CLI and automation tools
Author: Robert
Project-URL: Homepage, https://github.com/username/perplexity-cli
Project-URL: Bug Tracker, https://github.com/username/perplexity-cli/issues
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pyautogui>=0.9.54
Requires-Dist: pyperclip>=1.8.2
Requires-Dist: pillow>=9.5.0
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: numpy<2.0.0,>=1.24.0
Requires-Dist: loguru>=0.7.0
Requires-Dist: typer>=0.15.3
Requires-Dist: bs4>=0.0.2
Requires-Dist: html2text>=2024.2.26
Requires-Dist: bleach>=6.1.0
Requires-Dist: json-repair>=0.30.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Provides-Extra: vision
Requires-Dist: pillow>=9.5.0; extra == "vision"
Provides-Extra: apple-silicon
Requires-Dist: pillow>=9.5.0; extra == "apple-silicon"

# Perplexity CLI

A Python CLI tool for interacting with AI agents using automation and vision capabilities.

## Installation

### Basic Installation

```bash
# Create virtual environment
uv venv
source .venv/bin/activate

# Install with NumPy 1.x (required for PyTorch compatibility)
uv pip install "numpy>=1.24.0,<2.0.0"
uv pip install -e .
```

### Intel Mac GPU Acceleration (MPS Support)

> **IMPORTANT FOR INTEL MAC USERS**: Official PyTorch builds have deprecated support for Intel Macs (x86_64) as of January 2024. However, you can use the PyTorch nightly builds that include community fixes for MPS support on Intel Macs.

To use PyTorch with GPU acceleration on Intel Macs, simply run the provided installation script:

```bash
# Make sure you're in a virtual environment first
source .venv/bin/activate  # or whatever your venv is called

# Run the installer
./install_intel_mac.sh
```

This script will:
1. Check if you're on an Intel Mac
2. Install the nightly build of PyTorch with MPS support
3. Set the required environment variable (`PYTORCH_ENABLE_MPS_FALLBACK=1`)
4. Install other required dependencies

#### Manual Installation (if the script doesn't work)

If you prefer to do it manually:

```bash
# Install the nightly build with MPS support for Intel Macs
pip install --pre torch torchvision --index-url https://download.pytorch.org/whl/nightly/cpu

# Set the environment variable (required for MPS on Intel Macs)
export PYTORCH_ENABLE_MPS_FALLBACK=1

# Install other dependencies
pip install transformers accelerate pillow pyautogui
```

#### Verify MPS is Working

```python
import os
# Set environment variable
os.environ["PYTORCH_ENABLE_MPS_FALLBACK"] = "1"  

import torch
print(f"MPS available: {torch.backends.mps.is_available()}")
if torch.backends.mps.is_available():
    device = torch.device("mps")
    x = torch.ones(5, device=device)
    print(f"Using device: {device}, tensor: {x}")
```

The code has been updated to automatically use MPS acceleration when available and to add the required environment variable for Intel Macs.

### Apple Silicon Mac

For Apple Silicon (M1/M2/M3) Macs, MPS is natively supported:

```bash
# Install dependencies
uv pip install "numpy>=1.24.0,<2.0.0"
uv pip install -e ".[vision]"
```

## Usage

### Qwen Vision Interface

```bash
# Run with text query
python -m src.qwen_main --query "Your query here"

# With debug mode for more verbose output
python -m src.qwen_main --query "Your query here" --debug
```

### Other Commands

```bash
# For text paste functionality
python -m src.paste_text --text "Your text to paste"

# For basic vision detection
python -m src.vision_main --image_path /path/to/image.jpg
```

## Intel Mac Compatibility Notes

PyTorch officially deprecated support for Intel Macs in January 2024, with the last official version being 2.2.0. However, the community-maintained fork enables GPU acceleration through Apple's Metal API on Intel integrated graphics.

The fork:
- Enables MPS support for Intel GPUs (UHD or Iris)
- Allows using models like Qwen with GPU acceleration
- Performance is slower than Apple Silicon but better than CPU-only

When using the default installation without the fork, the code will fall back to CPU processing, which will be significantly slower for vision operations.

## Technical Details

- **PyTorch MPS**: Metal Performance Shaders backend for GPU acceleration on macOS
- **NumPy Compatibility**: PyTorch requires NumPy 1.x (the error "module compiled using NumPy 1.x cannot be run in NumPy 2.x" occurs because PyTorch was built against NumPy 1.x)
- **Device Management**: The code automatically detects and uses MPS when available, falling back to CPU when not
